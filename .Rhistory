sent140$emolex.rating = classify.sentiment(sent140$clean, lexicon = emolex)
sent140$ANEW.rating = classify.sentiment(sent140$clean, lexicon = ANEW)
sent140$ANEW.rating.pred = sign(sent140$ANEW.rating)
table(sent140$ANEW.rating.pred)
ans = table(sent140$polarity, sent140$ANEW.rating.pred)
ans
emoticon$ANEW.rating = classify.sentiment(emoticon$clean, lexicon = ANEW)
accuracy = (ans["0","-1"]+ans["1","1"])/(sum(ans[,"-1"])+sum(ans[,"1"]))
accuracy #is 75.87% (excluding neutral tweets)
precision = ans["1","1"]/sum(ans[,"1"])
precision # precision is 74.52%
recall = ans["1","1"]/sum(ans["1",])
recall # recall is 64.28%
f1 = (2*precision*recall)/(precision + recall)
f1 #is 69.02%
emoticon$ANEW.rating = classify.sentiment(emoticon$clean, lexicon = ANEW)
head(ANEW)
ANEW = read.csv(file = "~/Desktop/Documents/GitRepos/Rsentiment/Lexicons/ANEW.csv", header = FALSE)
colnames(ANEW) = c("word", "score")
ANEW$score = ANEW$score - 5
range(ANEW$score)
ANEW$score = ANEW$score - 6
range(ANEW$score)
ANEW = read.csv(file = "~/Desktop/Documents/GitRepos/Rsentiment/Lexicons/ANEW.csv", header = FALSE)
colnames(ANEW) = c("word", "score")
#ANEW$score = ANEW$score-(mean(ANEW$score)+1) #normalize ANEW scores to 0. This didn't work as well as the next line did.
ANEW$score = ANEW$score - 6
range(ANEW$score)
head(ANEW[order(-ANEW$score),], 20) #happiest words
head(ANEW[order(ANEW$score),], 20) #saddest words
sent140$ANEW.rating = classify.sentiment(sent140$clean, lexicon = ANEW)
sent140$ANEW.rating.pred = sign(sent140$ANEW.rating)
table(sent140$ANEW.rating.pred)
ans = table(sent140$polarity, sent140$ANEW.rating.pred)
ans
accuracy = (ans["0","-1"]+ans["1","1"])/(sum(ans[,"-1"])+sum(ans[,"1"]))
accuracy #is 64.67% (excluding neutral tweets)
precision = ans["1","1"]/sum(ans[,"1"])
precision # precision is 59.74%
recall = ans["1","1"]/sum(ans["1",])
recall # recall is 90.65%
f1 = (2*precision*recall)/(precision + recall)
f1 #is 72.05%
emoticon$ANEW.rating = classify.sentiment(emoticon$clean, lexicon = ANEW)
emoticon$ANEW.rating.pred = sign(emoticon$ANEW.rating)
table(emoticon$AFINN.rating2.pred)
table(emoticon$AFINN.rating.pred)
table(emoticon$polarity, emoticon$ANEW.rating.pred)
ans
ans = table(emoticon$polarity, emoticon$ANEW.rating.pred)
ans
accuracy = (ans["0","-1"]+ans["1","1"])/(sum(ans[,"-1"])+sum(ans[,"1"]))
accuracy #is 74.07% (excluding neutral tweets)
precision = ans["1","1"]/sum(ans[,"1"])
precision # precision is 81.75%
recall = ans["1","1"]/sum(ans["1",])
recall # recall is 61.53%
f1 = (2*precision*recall)/(precision + recall)
f1 #is 70.21%
sent140$emolex.rating = classify.sentiment(sent140$clean, lexicon = emolex)
storage.directory
NRC = read.csv(file = paste(storage.directory,"Lexicons/EmoLex/NRC-emotion-lexicon-wordlevel-alphabetized-v0.92.txt", sep = ""),
sep = "\t", header = FALSE)
sent140$NRC.rating = classify.sentiment(sent140$clean, lexicon = NRC)
sent140$NRC.rating.pred = sign(sent140$NRC.rating)
table(sent140$NRC.rating.pred)
ans = table(sent140$polarity, sent140$NRC.rating.pred)
ans
ans = table(sent140$polarity, sent140$NRC.rating.pred)
ans
accuracy = (ans["0","-1"]+ans["1","1"])/(sum(ans[,"-1"])+sum(ans[,"1"]))
accuracy #is 75.87% (excluding neutral tweets)
precision = ans["1","1"]/sum(ans[,"1"])
precision # precision is 74.52%
recall = ans["1","1"]/sum(ans["1",])
recall # recall is 64.28%
f1 = (2*precision*recall)/(precision + recall)
f1 #is 69.02%
emoticon$NRC.rating = classify.sentiment(emoticon$clean, lexicon = NRC)
emoticon$NRC.rating.pred = sign(emoticon$NRC.rating)
table(emoticon$AFINN.rating2.pred)
ans = table(emoticon$polarity, emoticon$NRC.rating.pred)
ans
table(emoticon$AFINN.rating.pred)
ans = table(emoticon$polarity, emoticon$NRC.rating.pred)
ans
accuracy = (ans["0","-1"]+ans["1","1"])/(sum(ans[,"-1"])+sum(ans[,"1"]))
accuracy #is 75.87% (excluding neutral tweets)
precision = ans["1","1"]/sum(ans[,"1"])
precision # precision is 74.52%
precision # precision is 66.03%
recall = ans["1","1"]/sum(ans["1",])
recall # recall is 64.28%
f1 = (2*precision*recall)/(precision + recall)
f1 #is 69.02%
rm(term.freq)
rm(termFreq())
rm(term.freq.test)
rm(a)
rm(accuracy)
rm(alpha)
rm(ans)
rm(f1)
rm(inv.doc.freq)
rm(negations)
rm(precision)
rm(recall)
rm(NRC)
rm(OpinionFinder)
rm(emoticon.tf.idf)
rm(ANEW)
rm(emoticon)
rm(AFINN)
rm(freq.all)
rm(sent140)
rm(tf.idf)
source("functions.R")
dim(AFINN_lexicon)
source("functions.R")
nTrain = 10
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
happy_indices = 1:(nrow(emoticon.tf.idf)/2)
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
sad_indices = (nrow(emoticon.tf.idf)/2+1):(nrow(emoticon.tf.idf))
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
happy_indices = 1:(nrow(emoticon.tf.idf)/2)
sad_indices = (nrow(emoticon.tf.idf)/2+1):(nrow(emoticon.tf.idf))
# Training and test data indices
nTrain = 10
nTest = 20000
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.tf.idf[train,])
Sys.time()-a
a = Sys.time()
svm.model=svm(polarity~.,data = emoticon.tf.idf[train,])
Sys.time()-a
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.tf.idf[train,])
Sys.time()-a
pred.sentiment = predict(rf.model, newdata = emoticon.tf.idf[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf[train,"polarity"])
phat=predict(rf.model, newdata = emoticon.tf.idf[train,], type = "prob")
plot(roc(emoticon.tf.idf[train,"polarity"],phat[,2]))
pred.sentiment = predict(rf.model, newdata = emoticon.tf.idf[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf[test,"polarity"])
phat=predict(rf.model, newdata = emoticon.tf.idf[test,], type = "prob")
plot(roc(emoticon.tf.idf[test,"polarity"],phat[,2]))
dim(test)
test
length(test)
pred.sentiment = predict(rf.model, newdata = emoticon.tf.idf[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf[test,"polarity"])
phat=predict(rf.model, newdata = emoticon.tf.idf[test,], type = "prob")
plot(roc(emoticon.tf.idf[test,"polarity"],phat[,2]))
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.tf.idf[train,])
Sys.time()-a
dim(emoticon.tf.idf)
dim(emoticon.tf.idf[train,])
pred.sentiment = predict(rf.model, newdata = emoticon.tf.idf[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf[train,"polarity"])
phat=predict(rf.model, newdata = emoticon.tf.idf[train,], type = "prob")
plot(roc(emoticon.tf.idf[train,"polarity"],phat[,2]))
#Test data results
pred.sentiment = predict(rf.model, newdata = emoticon.tf.idf[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf[test,"polarity"])
phat=predict(rf.model, newdata = emoticon.tf.idf[test,], type = "prob")
plot(roc(emoticon.tf.idf[test,"polarity"],phat[,2]))
rf.model
nTrain = 20000
nTest = 20000
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.tf.idf[train,])
Sys.time()-a
#Train data results
pred.sentiment = predict(rf.model, newdata = emoticon.tf.idf[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf[train,"polarity"])
phat=predict(rf.model, newdata = emoticon.tf.idf[train,], type = "prob")
plot(roc(emoticon.tf.idf[train,"polarity"],phat[,2]))
pred.sentiment = predict(rf.model, newdata = emoticon.tf.idf[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf[test,"polarity"])
phat=predict(rf.model, newdata = emoticon.tf.idf[test,], type = "prob")
plot(roc(emoticon.tf.idf[test,"polarity"],phat[,2]))
phat
save(rf.model, file = paste(storage.directory, "rf.model.RData", sep = ""))
Sys.time()-a
load(file = paste(storage.directory, "sent140.RData", sep = ""))
classify.polarity.machine = function(data, model, give.accuracy = FALSE, give.roc.curve = FALSE){
source("functions.R")
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
ndsi.lexicon = freq.all[freq.all$ndsi>0.05,]
term.freq <- t(apply(t(data[,"clean"]), 2,    #MAY TAKE TIME!
ndsi.frequencies))
load(file = paste(storage.directory, "inv.doc.freq.RData", sep = ""))
bigmatrixforclassification = as.data.frame(term.freq %*% diag(inv.doc.freq))
colnames(bigmatrixforclassification) = paste("X", 1:1024, sep = "") #hacky fix for column names
pred.sentiment = predict(model, newdata = bigmatrixforclassification)
if(give.accuracy != FALSE){
require(caret)
result = confusionMatrix(pred.sentiment, data$polarity) # Accuracy is a respectable 68%
print(result$table)
print(result$overall[1])
print(result$byClass[1])
print(result$byClass[2])
#give F1 measure too
}
if(give.roc.curve != FALSE){
require(pROC)
phat=predict(model,
newdata = bigmatrixforclassification,
type = "prob")
result = plot(roc(data$polarity, phat[,2]))
print(result)
}
print("hello world!")
pred.sentiment
}
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
pred.sentiment = predict(rf.model, newdata = emoticon.tf.idf[train,], type = "class")
table(pred.sentiment)
confusionMatrix(pred.sentiment,emoticon.tf.idf[train,"polarity"])
phat=predict(rf.model, newdata = emoticon.tf.idf[train,], type = "prob")
plot(roc(emoticon.tf.idf[train,"polarity"],phat[,2]))
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
head(freq.all)
library(ROAuth)
load("my_oauth.Rdata") # Note to avoid reusing credentials, "my_oauth.Rdata" should only be
rm(freq.all)
rm(phat)
rm(sent140)
demo()
nTrain = 20
nTest = 20
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
load(paste(storage.directory,"emoticon.term.freq.RData", sep = "")) # load emoticon.term.freq lexicon into memory as tf.idf
happy_indices = 1:(nrow(emoticon.term.freq)/2)
sad_indices = (nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq))
# Training and test data indices
nTrain = 20
nTest = 20
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
load(paste(storage.directory,"emoticon.term.freq.RData", sep = "")) # load emoticon.term.freq lexicon into memory as tf.idf
source("functions.R")
load(paste(storage.directory,"emoticon.term.freq.RData", sep = "")) # load emoticon.term.freq lexicon into memory as tf.idf
happy_indices = 1:(nrow(emoticon.term.freq)/2)
sad_indices = (nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq))
# Training and test data indices
nTrain = 20
nTest = 20
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.term.freq[train,])
Sys.time()-a
#Train data results
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[train,], type = "prob")
plot(roc(emoticon.term.freq[train,"polarity"],phat[,2]))
#Test data results
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[test,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[test,], type = "prob")
plot(roc(emoticon.term.freq[test,"polarity"],phat[,2]))
nTrain = 20000
nTest = 20000
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
rm(rf.model)
rm(sad_indices)
rm(happy_indices)
rm(negations)
rm(phat)
rm(AFINN_lexicon)
rm(classify.sentiment)
rm(clean.tweets)
rm(ndsi.frequencies)
rm(AFINN_lexicon.frequencies)
rm(word.freq)
rm(pred.sentiment)
# Random Forest (SLOW: Takes MANY HOURS to run)
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.term.freq[train,])
Sys.time()-a
#Train data results
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[train,], type = "prob")
plot(roc(emoticon.term.freq[train,"polarity"],phat[,2]))
#Test data results
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[test,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[test,], type = "prob")
plot(roc(emoticon.term.freq[test,"polarity"],phat[,2]))
#Save model
save(rf.model, file = paste(storage.directory, "rf.model.RData", sep = ""))
classify.polarity.machine = function(data, model, give.accuracy = FALSE, give.roc.curve = FALSE){
source("functions.R")
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
ndsi.lexicon = freq.all[freq.all$ndsi>0.05,]
term.freq <- t(apply(t(data[,"clean"]), 2,    #MAY TAKE TIME!
ndsi.frequencies))
load(file = paste(storage.directory, "inv.doc.freq.RData", sep = ""))
bigmatrixforclassification = as.data.frame(term.freq %*% diag(inv.doc.freq))
colnames(bigmatrixforclassification) = paste("X", 1:1024, sep = "") #hacky fix for column names
pred.sentiment = predict(model, newdata = bigmatrixforclassification)
if(give.accuracy != FALSE){
require(caret)
result = confusionMatrix(pred.sentiment, data$polarity) # Accuracy is a respectable 68%
print(result$table)
print(result$overall[1])
print(result$byClass[1])
print(result$byClass[2])
#give F1 measure too
}
if(give.roc.curve != FALSE){
require(pROC)
phat=predict(model,
newdata = bigmatrixforclassification,
type = "prob")
result = plot(roc(data$polarity, phat[,2]))
print(result)
}
print("hello world!")
#pred.sentiment
}
source("functions.R")
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
load(file = paste(storage.directory, "sent140.RData", sep = ""))
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
nTrain = 100000
nTest = 100000
happy_indices = 1:(nrow(emoticon.term.freq)/2)
sad_indices = (nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq))
nTrain = 100000
nTest = 100000
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.term.freq[train,])
Sys.time()-a
pred.sentiment = predict(tree.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
phat=predict(tree.model, newdata = emoticon.term.freq[train,], type = "prob")
plot(roc(emoticon.term.freq[train,"polarity"],phat[,2]))
pred.sentiment = predict(tree.model, newdata = emoticon.term.freq[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[test,"polarity"])
phat=predict(tree.model, newdata = emoticon.term.freq[test,], type = "prob")
plot(roc(emoticon.term.freq[test,"polarity"],phat[,2]))
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
classify.polarity.machine(data = sent140, model = tree.model, give.accuracy = TRUE, give.roc.curve = TRUE)
rm(rf.model)
rm(pred.sentiment)
rm(nTrain)
rm(nTest)
rm(negations)
rm(happy_indices)
rm(a)
rm(sad_indices)
rm(sent140)
rm(phat)
rm(freq.all)
rm(emoticon.term.freq)
rm(AFINN_lexicon)
rm(test)
rm(train)
rm(tree.model)
rm(clean.tweets)
rm(ndsi.frequencies)
rm(word.freq)
rm(classify.sentiment)
rm(classify.polarity.machine())
rm(classify.polarity.machine
)
rm(AFINN_lexicon.frequencies)
load(paste(storage.directory,"emoticon.term.freq.RData", sep = "")) # load emoticon.term.freq lexicon into memory as tf.idf
happy_indices = 1:(nrow(emoticon.term.freq)/2)
sad_indices = (nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq))
# Training and test data indices
nTrain = 10
nTest = 200
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.term.freq[train,])
Sys.time()-a
library(rpart)
library(randomForest)
library(pROC)
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.term.freq[train,])
Sys.time()-a
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
pred.sentiment = predict(tree.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
phat=predict(tree.model, newdata = emoticon.term.freq[train,], type = "prob")
library(caret)
phat=predict(tree.model, newdata = emoticon.term.freq[train,], type = "prob")
plot(roc(emoticon.term.freq[train,"polarity"],phat[,2]))
pred.sentiment = predict(tree.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
phat=predict(tree.model, newdata = emoticon.term.freq[train,], type = "prob")
plot(roc(emoticon.term.freq[train,"polarity"],phat[,2]))
pred.sentiment = predict(tree.model, newdata = emoticon.term.freq[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[test,"polarity"])
phat=predict(tree.model, newdata = emoticon.term.freq[test,], type = "prob")
plot(roc(emoticon.term.freq[test,"polarity"],phat[,2]))
load(paste(storage.directory,"emoticon.term.freq.RData", sep = "")) # load emoticon.term.freq lexicon into memory as tf.idf
happy_indices = 1:(nrow(emoticon.term.freq)/2)
sad_indices = (nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq))
# Training and test data indices
nTrain = 40000
nTest = 40000
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
rm(phat)
rm(a)
rm(nTest)
rm(happy_indices)
rm(sad_indices)
rm(tree.model)
help(notify)
help(buzz)
Sys.timezone()
# Random Forest (SLOW: Takes MANY HOURS to run)
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.term.freq[train,])
Sys.time()-a
#Train data results
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[train,], type = "prob")
plot(roc(emoticon.term.freq[train,"polarity"],phat[,2]))
#Test data results
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[test,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[test,], type = "prob")
plot(roc(emoticon.term.freq[test,"polarity"],phat[,2]))
#Save model
save(rf.model, file = paste(storage.directory, "rf.model.RData", sep = ""))
print("DONE! YAY!!!")
load(file = paste(storage.directory, "sent140.RData", sep = ""))
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
classify.polarity.machine = function(data, model, give.accuracy = FALSE, give.roc.curve = FALSE){
source("functions.R")
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
ndsi.lexicon = freq.all[freq.all$ndsi>0.05,]
term.freq <- t(apply(t(data[,"clean"]), 2,    #MAY TAKE TIME!
ndsi.frequencies))
load(file = paste(storage.directory, "inv.doc.freq.RData", sep = ""))
bigmatrixforclassification = as.data.frame(term.freq %*% diag(inv.doc.freq))
colnames(bigmatrixforclassification) = paste("X", 1:1024, sep = "") #hacky fix for column names
pred.sentiment = predict(model, newdata = bigmatrixforclassification)
if(give.accuracy != FALSE){
require(caret)
result = confusionMatrix(pred.sentiment, data$polarity) # Accuracy is a respectable 68%
print(result$table)
print(result$overall[1])
print(result$byClass[1])
print(result$byClass[2])
#give F1 measure too
}
if(give.roc.curve != FALSE){
require(pROC)
phat=predict(model,
newdata = bigmatrixforclassification,
type = "prob")
result = plot(roc(data$polarity, phat[,2]))
print(result)
}
print("hello world!")
#pred.sentiment
}
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
pred.sentiment = predict(svm.model, newdata = emoticon.term.freq[-train,], type = "class")
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[-train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[-train,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[-train,], type = "prob")
plot(roc(emoticon.term.freq[-train,"polarity"],phat[,2]))
git rm(emoticon.term.freq)
rm(emoticon.term.freq)
rm(AFINN_lexicon)
rm(freq.all)
rm(phat)
rm(sent140)
rm(a)
rm(negations)
rm(nTrain)
rm(pred.sentiment)
rm(rf.model)
rm(storage.directory)
rm(test)
rm(train)
rm(AFINN_lexicon.frequencies())
rm(AFINN_lexicon.frequencies)
rm(classify.polarity.machine)
rm(classify.sentiment)
rm(clean.tweets)
rm(ndsi.frequencies)
rm(word.freq)
