set.seed(2016)
index = sample(nrow(emoticon), nrow(emoticon))
emoticon = emoticon[index,] #shuffle rows to mix up positives and negatives
ggplot(emoticon, aes(jitter(rf.score), jitter(AFINN.score, factor = 2), color = polarity)) +
geom_point(size = 1, alpha = 0.5) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Emoticon Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the second really good plot!
ggsave(filename = "emoticon.classifiers.png", plot = last_plot(), width = 12, height = 10)
ggplot(emoticon, aes(jitter(rf.score), jitter(AFINN.score, factor = 2), color = polarity)) +
geom_point(size = 2, alpha = 0.5) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Emoticon Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the second really good plot!
ggplot(emoticon, aes(jitter(rf.score), jitter(AFINN.score, factor = 2), color = polarity)) +
geom_point(size = 2, alpha = 0.3) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Emoticon Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the second really good plot!
emoticon = emoticon[index,] #shuffle rows to mix up positives and negatives
ggplot(emoticon, aes(jitter(rf.score), jitter(AFINN.score, factor = 2), color = polarity)) +
geom_point(size = 3, alpha = 0.3) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Emoticon Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the second really good plot!
ggplot(sent140, aes(rf.score, AFINN.score, color = polarity)) +
geom_point(size = 3) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Sent140 Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the first really good plot!
ggplot(sent140, aes(rf.score, AFINN.score, color = polarity)) +
geom_point(size = 3) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,5),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Sent140 Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the first really good plot!
ggplot(sent140, aes(rf.score, AFINN.score, color = polarity)) +
geom_point(size = 5) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Sent140 Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the first really good plot!
ggplot(emoticon, aes(jitter(rf.score), jitter(AFINN.score, factor = 2), color = polarity)) +
geom_point(size = 4, alpha = 0.3) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Emoticon Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the second really good plot!
ggplot(emoticon, aes(jitter(rf.score), jitter(AFINN.score, factor = 2), color = polarity)) +
geom_point(size = 10, alpha = 0.3) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Emoticon Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the second really good plot!
emoticon = emoticon[index,] #shuffle rows to mix up positives and negatives
ggplot(emoticon, aes(jitter(rf.score), jitter(AFINN.score, factor = 2), color = polarity)) +
geom_point(size = 4, alpha = 0.3) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Emoticon Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the second really good plot!
ggsave(filename = "emoticon.classifiers.png", plot = last_plot(), width = 12, height = 10)
ggplot(sent140, aes(rf.score, AFINN.score, color = polarity)) +
geom_point(size = 4) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Sent140 Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the first really good plot!
ggsave(filename = "sent140.classifiers.png", plot = last_plot(), width = 12, height = 10)
ggplot(emoticon, aes(jitter(rf.score), jitter(AFINN.score, factor = 2), color = polarity)) +
geom_point(size = 3, alpha = 0.2) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Emoticon Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the second really good plot!
ggplot(emoticon, aes(jitter(rf.score), jitter(AFINN.score, factor = 2), color = polarity)) +
geom_point(size = 4, alpha = 0.3) +
theme(axis.text = element_text(size = 20),
axis.title= element_text(size = 30),
plot.title= element_text(size = 36),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.position = "bottom") +
scale_colour_manual(values = c(20,3),
labels = c(" negative   ", " positive"),
name = "Polarity:  ") +
ggtitle("Emoticon Classifiers") +
xlab("rf.polarity") +
ylab("AFINN.polarity")     # <-- this is the second really good plot!
ggsave(filename = "emoticon.classifiers.png", plot = last_plot(), width = 12, height = 10)
ggmap("Los Angeles County")
library(ggmap)
ggmap("Los Angeles County")
LAmapget_map("Los Angeles County")
LAmap = get_map("Los Angeles County")
print(LAmap)
ggmap(LAmap)
q()
mpg
cars
data(mpg)
load(file = paste(storage.directory, "LA2014.RData", sep = "")) # load LA2014 into memory as LA2014
source("functions.R")
library(plyr)
library(dplyr)
load(file = paste(storage.directory, "LA2014.RData", sep = "")) # load LA2014 into memory as LA2014
LA2014$time = as.POSIXlt(paste(paste(LA2014$year, LA2014$month, LA2014$date, sep = "-"), "  ", paste(LA2014$hour, LA2014$minute, LA2014$second, sep = ":"), sep = ""))
LA2014$year = NULL
LA2014$month = NULL
LA2014$date = NULL
LA2014$hour = NULL
LA2014$minute = NULL
LA2014$second = NULL
LA2014$time = as.POSIXlt(LA2014$time - (7*3600)) # subtract 7 hours to change from UTC to PST
LA2014$time = as.POSIXct(LA2014$time)
name.count = as.data.frame(table(LA2014$username))
names(name.count)<-c("username","nTweets")
name.count<-arrange(name.count,desc(nTweets))
hist(name.count$nTweets)
plot(name.count$nTweets,
log = "y",
pch = 20,
main = "Tweets per Username",
xlab = "Unique Usernames",
ylab = "Number of Tweets")
dim(name.count)
colnames(name.count)
mean(name.count$nTweets)
max(name.count$nTweets)
source("functions.R")
freq.all
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
head(freq.all)
tail(freq.all)
dim(freq.all)
freq.all[1:1000,]
freq.all[1:100,]
freq.all[1:1000,]
load(paste(storage.directory, "emoticon.RData", sep = "")) # load emoticon/emoticon into memory as emoticon
dim(emoticon)
head(emoticon)
load(paste(storage.directory,"emoticon.term.freq.RData", sep = "")) # load emoticon.term.freq lexicon into memory as tf.idf
dim(emoticon.term.freq)
head(emoticon.term.freq)
1024/2
2^10
dim(emoticon)
dim(emoticon.term.freq)
rf.model=randomForest(polarity~.,data = emoticon.term.freq[train,])
load(file = paste(storage.directory, "rf.model.RData", sep = ""))
rf.model
rf.model$call
rf.model$type
rf.model$predicted
rf.model$err.rate
rf.model$confusion
rf.model$ntree
rf.model$y
rf.model$forest
rf.model$inbag
rf.model$terms
rf.model$mtry
NRC = read.csv(file = "~/Desktop/Documents/GitRepos/Rsentiment/Lexicons/EmoLex/NRC-emotion-lexicon-wordlevel-alphabetized-v0.92.txt",
sep = "\t", header = FALSE)
colnames(NRC) = c("word", "emotion", "indicator")
NRC = NRC[NRC$emotion == "negative"|NRC$emotion == "positive",]
NRC = NRC[NRC$indicator == 1,]
NRC[NRC$emotion == "negative",]$indicator = -1
NRC = NRC[c("word", "indicator")]
colnames(NRC) = c("word", "score")
head(NRC)
ANEW = read.csv(file = "~/Desktop/Documents/GitRepos/Rsentiment/Lexicons/ANEW.csv", header = FALSE)
colnames(ANEW) = c("word", "score")
range(ANEW$score)
dim(ANEW)
dim(NRC)
source("functions.R")
load(paste(storage.directory,"emoticon.term.freq.RData", sep = "")) # load emoticon.term.freq lexicon into memory as tf.idf
nTrain = 10
nTest = 40
train_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTrain/2), sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTrain/2))
test_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTest/2), sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTest/2))
train_indices
test_indices
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.term.freq[train_indices,])
library(randomForest)
rf.model=randomForest(polarity~.,data = emoticon.term.freq[train_indices,])
Sys.time()-a
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.term.freq[train_indices,])
Sys.time()-a
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train,], type = "class")
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train_indices,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train_indices,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[train_indices,], type = "prob")
plot(roc(emoticon.term.freq[train_indices,"polarity"],phat[,2]))
library(e1071)
library(e1071)
plot(roc(emoticon.term.freq[train_indices,"polarity"],phat[,2]))
phat=predict(rf.model, newdata = emoticon.term.freq[train_indices,], type = "prob")
library(proc)
library(pROC)
plot(roc(emoticon.term.freq[train_indices,"polarity"],phat[,2]))
phat=predict(rf.model, newdata = emoticon.term.freq[train_indices,], type = "prob")
plot(roc(emoticon.term.freq[train_indices,"polarity"],phat[,2]))
confusionMatrix(pred.sentiment,emoticon.term.freq[train_indices,"polarity"])
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[test_indices,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[test_indices,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[test_indices,], type = "prob")
plot(roc(emoticon.term.freq[test_indices,"polarity"],phat[,2]))
help(train)
iris
head(emoticon.term.freq)
train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
nTrain = 100
nTest = 400
train_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTrain/2), sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTrain/2))
test_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTest/2), sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTest/2))
# Caret model using train function
rf.model = train(polarity ~ ., data=emoticon.term.freq[train_indices,], method="rf")
rf.model
a = Sys.time()
Sys.time()-a
a = Sys.time()
Sys.time()-a
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train_indices,], type = "class")
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train_indices,], type = "raw")
confusionMatrix(pred.sentiment,emoticon.term.freq[train_indices,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[train_indices,], type = "prob")
hist(phat)
phat
hist(phat[,1])
phat=predict(rf.model, newdata = emoticon.term.freq[train_indices,], type = "prob")
plot(roc(emoticon.term.freq[train_indices,"polarity"],phat[,2]))
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[test_indices,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[test_indices,"polarity"])
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[test_indices,], type = "raw")
confusionMatrix(pred.sentiment,emoticon.term.freq[test_indices,"polarity"])
confusionMatrix(pred.sentiment,emoticon.term.freq[train_indices,"polarity"])
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train_indices,], type = "raw")
confusionMatrix(pred.sentiment,emoticon.term.freq[train_indices,"polarity"])
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[test_indices,], type = "raw")
pred.sentiment
confusionMatrix(pred.sentiment,emoticon.term.freq[test_indices,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[test_indices,], type = "prob")
plot(roc(emoticon.term.freq[test_indices,"polarity"],phat[,2]))
nTrain = 10
a = Sys.time()
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
nTrain = 10
nTest = 400
train_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTrain/2), sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTrain/2))
test_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTest/2), sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTest/2))
a = Sys.time()
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
Sys.time()-a
help(registerDoMC)
library(doMC)
help(registerDoMC)
registerDoMC(2)
a = Sys.time()
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
Sys.time()-a
registerDoMC(3)
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.term.freq[train_indices,])
Sys.time()-a
a = Sys.time()
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
Sys.time()-a
a = Sys.time()
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
Sys.time()-a
registerDoMC(1)
a = Sys.time()
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
Sys.time()-a
registerDoMC(4)
a = Sys.time()
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
Sys.time()-a
a = Sys.time()
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
Sys.time()-a
source("functions.R") #get cleaning function, AFINN_lexicon
library(doMC)
library(randomForest)
library(caret)
load(paste(storage.directory,"emoticon.term.freq.RData", sep = "")) # load emoticon.term.freq lexicon into memory as tf.idf
# Training and test data indices
nTrain = 500
nTest = 1000
train_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTrain/2), sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTrain/2))
test_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTest/2), sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTest/2))
registerDoMC(2)
a = Sys.time()
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
Sys.time()-a
beepr::beep(3)
source("functions.R")
nTrain = 10
nTest = 50000
train_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTrain/2),
sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTrain/2))
test_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTest/2),
sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTest/2))
# Build a model using emoticon data and new dictionary
# Caret Model
library(doMC)
registerDoMC(4)
#  nTrain    1 core     2 cores     3 cores     4 cores
#  100       3.13 mins  1.56 mins   2.39 mins   1.62 mins
#  nTrain    1 core     2 cores     3 cores     4 cores
#  500       41.4 mins  27.7 mins   32.9 mins   21.49 mins
#  nTrain    1 core     2 cores     3 cores     4 cores
#  1000      1.59 hrs   1.17 hrs    1.49 hrs    1.08 hrs
#  nTrain    1 core     2 cores     3 cores     4 cores
#  2000                                         6.08 hours
#  nTrain    1 core     2 cores     3 cores     4 cores
#  5000                                          hours
#  nTrain    4 cores
#  25 000    ?? days
Sys.time()
a = Sys.time()
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
Sys.time()-a
beepr::beep(3)
nTrain = 5000
nTest = 10000
train_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTrain/2),
sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTrain/2))
test_indices = c(sample(1:(nrow(emoticon.term.freq)/2),nTest/2),
sample((nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq)),nTest/2))
# Build a model using emoticon data and new dictionary
# Caret Model
library(doMC)
registerDoMC(4)
#  nTrain    1 core     2 cores     3 cores     4 cores
#  100       3.13 mins  1.56 mins   2.39 mins   1.62 mins
#  nTrain    1 core     2 cores     3 cores     4 cores
#  500       41.4 mins  27.7 mins   32.9 mins   21.49 mins
#  nTrain    1 core     2 cores     3 cores     4 cores
#  1000      1.59 hrs   1.17 hrs    1.49 hrs    1.08 hrs
#  nTrain    1 core     2 cores     3 cores     4 cores
#  2000                                         6.08 hours
#  nTrain    1 core     2 cores     3 cores     4 cores
#  5000                                          hours
#  nTrain    4 cores
#  25 000    ?? days
Sys.time()
a = Sys.time()
rf.model = train(polarity~., data = emoticon.term.freq[train_indices,], method = "rf")
Sys.time()-a
save(rf.model, file = paste(storage.directory, "rf.model.RData", sep = ""))
rf.model
summary(rf.forest)
summary(rf.model)
rf.model$problemType
rf.model$obsLevels
rf.model$obsLevels[[1]]
rf.model$obsLevels[[2]]
rf.model$obsLevels[[3]]
rf.model$obsLevels[1]
rf.model$obsLevels[2]
rf.model$obsLevels[10]
# Import functions
source("functions.R")
# Import x
x = read.csv(file = "~/Desktop/Huang Research/Rsentiment/ComTweetsLA.csv", skip = 1, nrows = 9400000, header = FALSE, colClasses =
c("character", "character", "character", "numeric", "numeric", "integer", "integer", "integer", "integer", "integer", "integer"))
load(file = paste(storage.directory, "x.RData", sep = ""))
library(ggmap)
help(ggmap)
x = read.csv(file = "~/Desktop/Huang Research/Rsentiment/ComTweetsLA.csv", skip = 1, nrows = 9400000, header = FALSE, colClasses =
c("character", "character", "character", "numeric", "numeric", "integer", "integer", "integer", "integer", "integer", "integer"))
rm(x)
library(streamR)
library(feather)
library(cldr)
setwd("~/Desktop/Huang Research/September_LaPY_data/")
a = Sys.time()
temp_df = parseTweets(tweets = "2016-09-11.json")
Sys.time()-a
temp_df = parseTweets(tweets = "raw_data/2016-09-11.json")
Sys.time()-a
perm_df = data.frame()
j=1
for(i in list.files(path = "./raw_data")){
print(i)
#Import one .json file into R as data frame
temp_df = parseTweets(tweets = paste("raw_data/", i, sep = ""))
#Remove unnecessary rows
temp_df = temp_df[,c("text", "screen_name", "id_str", "place_lat", "place_lon", "created_at")]
#Remove rows with no text
temp_df = temp_df[temp_df$text!="",]
#Remove rows with very Spanish-sounding tweets.
temp_df[,c("language", "isReliable")] = detectLanguage(temp_df$text)[c("detectedLanguage", "isReliable")]
temp_df = temp_df[temp_df$language != "SPANISH" | temp_df$isReliable == FALSE,]
temp_df$language = NULL
temp_df$isReliable = NULL
#Combine temp_df and perm_df
perm_df = rbind(perm_df, temp_df)
#If perm_df is too big OR if last file then write it to file and restart
if(nrow(perm_df) >= 1000000 | i==tail(list.files(),1)){
write_feather(x = perm_df, path = paste("clean_data/", j, sep=""))
j = j+1
perm_df = data.frame()
}
}
