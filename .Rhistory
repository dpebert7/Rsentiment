hist(name.count$frequency)
plot(name.count$frequency)
plot(dow.count$wkday,dow.count$n)
plot(name.count$frequency)
plot(name.count$frequency,
log = "x")
plot(name.count$frequency,
log = "y")
plot(name.count$frequency,
log = "y",
xlab = "Unique Usernames",
ylab = "Number of Tweets")
plot(dow.count$wkday,dow.count$n)
plot(dow.count$wkday,dow.count$n,
xlab = "day of week"
ylab = "number of tweets")
plot(dow.count$wkday,dow.count$n,
xlab = "day of week",
ylab = "number of tweets")
rm(AFINN_lexicon)
rm(date.count)
rm(dow.count)
rm(dow.df)
rm(emoticon.tf.idf)
rm(hour.count)
rm(month.count)
rm(name.count)
rm(results)
rm(a)
rm(documents)
rm(rf.model)
rm(x)
plot(name.count$frequency,
log = "y",
xlab = "Unique Usernames",
ylab = "Number of Tweets")
name.count<-data.frame(count(x,username))
library(plyr)
library(dplyr)
load("~/Desktop/Huang Research/Rsentiment/comTweetsLA.RData") # load LA2014 into memory as x
library(plyr)
library(dplyr)
x$text<-as.character(x$text)
x$username<-as.character(x$username)
summary(x)
summary(x$username)
# Plot tweets per username
name.count<-data.frame(count(x,username))
# name.count$username<-as.character(name.count$username)
names(name.count)<-c("username","frequency")
name.count<-filter(name.count,username != "")
name.count<-arrange(name.count,desc(frequency))
hist(name.count$frequency)
plot(name.count$frequency,
log = "y",
xlab = "Unique Usernames",
ylab = "Number of Tweets")
line(name.count$frequency,
log = "y",
xlab = "Unique Usernames",
ylab = "Number of Tweets")
plot(name.count$frequency,
log = "y",
xlab = "Unique Usernames",
ylab = "Number of Tweets")
plot(name.count$frequency,
log = "y",
xlab = "Unique Usernames",
ylab = "Number of Tweets",
pch = 1)
plot(name.count$frequency,
log = "y",
xlab = "Unique Usernames",
ylab = "Number of Tweets",
pch = 4)
plot(name.count$frequency,
log = "y",
xlab = "Unique Usernames",
ylab = "Number of Tweets",
type = "l")
source("functions.R") #get cleaning function, AFINN_lexicon
install.packages("ggplot2")
source("functions.R") #get cleaning function, AFINN_lexicon
AFINN_lexicon = read.delim(file = "~/Desktop/Documents/GitRepos/Rsentiment/Lexicons/AFINN/AFINN-111.txt", stringsAsFactors = FALSE, header = F, quote = '')
AFINN_lexicon = read.delim(file = "~/Lexicons/AFINN/AFINN-111.txt", stringsAsFactors = FALSE, header = F, quote = '')
AFINN_lexicon = read.delim(file = "Lexicons/AFINN/AFINN-111.txt", stringsAsFactors = FALSE, header = F, quote = '')
head(AFINN_lexicon)
rm(x)
load("~/Desktop/Huang Research/Rsentiment/emoticon.RData") # load train/emoticon into memory as emoticon
table(emoticon$polarity)
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
head(freq.all)
#T load tf.idf created by emoticon.R
load(paste(storage.directory,"tf.idf.RData", sep = "")) # load tf.idf lexicon into memory as tf.idf
# load emoticon.tf.idf created by emoticon.R
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
table(emoticon.tf.idf$polarity)
dim(emoticon.tf.idf)
dim(rbind(head(emoticon.tf.idf,1000), tail(emoticon.tf.idf,1000)))
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,1000), tail(emoticon.tf.idf,1000)))
dim(emoticon.tf.idf)
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.tf.idf)
Sys.time()-a
source(functions.R)
source("functions.R")
library(rpart)
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon$polarity) #accuracy is only 60%
library(caret)
library(pROC)
confusionMatrix(pred.sentiment,emoticon$polarity) #accuracy is only 60%
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity) #accuracy is only 60%
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon$polarity,phat[,2]))  #BLEH. Not great
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.tf.idf)
Sys.time()-a
source("functions.R")
source("functions.R")
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment=predict(rf.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity)
phat=predict(rf.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = emoticon.tf.idf[c(1001:2000,60001:61000)]
emoticon.tf.idf = emoticon.tf.idf[c(1001:2000,60001:61000),]
dim(emoticon.tf.idf)
table(emoticon.tf.idf$polarity)
pred.sentiment=predict(rf.model, newdata = emoticon.tf.idf[])
confusionMatrix(pred.sentiment,emoticon$polarity)
pred.sentiment=predict(rf.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity)
phat=predict(rf.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,1000), tail(emoticon.tf.idf,1000))) #training data
help(naiveBayes)
a = Sys.time()
nb.model=naiveBayes(polarity~.,data = emoticon.tf.idf) #NOT SURE WHY THIS WON'T WORK
Sys.time()-a
nb.model
a = Sys.time()
nb.model=naiveBayes(polarity~.,data = emoticon.tf.idf) #NOT SURE WHY THIS WON'T WORK
Sys.time()-a
pred.sentiment=predict(nb.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity)
phat=predict(rf.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon$polarity,phat[,2]))
phat=predict(nb.model,
newdata = emoticon.tf.idf,
type = "prob")
phat=predict(nb.model,
newdata = emoticon.tf.idf,
type = "raw")
plot(roc(emoticon$polarity,phat[,2]))
phat
confusionMatrix(pred.sentiment[,1],emoticon.tf.idf$polarity)
plot(roc(emoticon$polarity,phat[,2]))
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = emoticon.tf.idf[c(1001:2000,60001:61000),] #test data
phat=predict(nb.model,
newdata = emoticon.tf.idf,
type = "raw")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
pred.sentiment=predict(nb.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity)
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,10000), tail(emoticon.tf.idf,10000))) #training data
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity) #accuracy is only 60%
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
dim(emoticon.tf.idf)
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,10000), tail(emoticon.tf.idf,10000))) #training data
dim(emoticon.tf.idf)
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity) #accuracy is only 60%
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = emoticon.tf.idf[c(10001:20000,60001:70000),] #test data
dim(emoticon.tf.idf)
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity) #accuracy is only 60%
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,10000), tail(emoticon.tf.idf,10000))) #training data
a = Sys.time()
nb.model=naiveBayes(polarity~.,data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment=predict(nb.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity)
phat=predict(nb.model,
newdata = emoticon.tf.idf,
type = "raw")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,5000), tail(emoticon.tf.idf,5000))) #training data
a = Sys.time()
svm.model=svm(polarity~.,data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment=predict(svm.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment, emoticon.tf.idf$polarity)
phat=predict(svm.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
dim(phat)
phat=predict(svm.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
phat
phat=predict(svm.model,
newdata = emoticon.tf.idf,
type = "raw")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
head(phat)
dim(emoticon.tf.idf)
help(predict)
phat=predict(svm.model,
newdata = emoticon.tf.idf,
type = "prob")
head(phat)
dim(emoticon.tf.idf)
confusionMatrix(pred.sentiment, emoticon.tf.idf$polarity)
emoticon.tf.idf = emoticon.tf.idf[c(5001:10000,60001:65000),] #test data
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = emoticon.tf.idf[c(5001:10000,60001:65000),] #test data
dim(emoticon.tf.idf)
pred.sentiment=predict(svm.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment, emoticon.tf.idf$polarity)
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,10000), tail(emoticon.tf.idf,10000))) #training data
a = Sys.time()
svm.model=svm(polarity~.,data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
pred.sentiment=predict(svm.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment, emoticon.tf.idf$polarity)
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = emoticon.tf.idf[c(10001:20000,60001:70000),] #test data
phat=predict(svm.model,
newdata = emoticon.tf.idf,
type = "prob")  #not sure what the correct type is
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
pred.sentiment=predict(svm.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment, emoticon.tf.idf$polarity)
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,5000), tail(emoticon.tf.idf,5000))) #training data
dim(emoticon.tf.idf)
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment=predict(rf.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity)
phat=predict(rf.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = emoticon.tf.idf[c(10001:15000,60001:65000),] #test data
pred.sentiment=predict(rf.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity)
phat=predict(rf.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
dim(emoticon.tf.idf)
emoticon.tf.idf = emoticon.tf.idf[c(10001:25000,52001:77000),] #test data
dim(emoticon.tf.idf)
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
tree.model = rpart(polarity~., data = emoticon.tf.idf)
emoticon.tf.idf$polarity[50000]
emoticon.tf.idf$polarity[50001]
emoticon.tf.idf$polarity[50002]
dim(emoticon.tf.idf)
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf$polarity[50000]
emoticon.tf.idf$polarity[50001]
nTraining = 10000
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,nTraining), tail(emoticon.tf.idf,nTraining))) #training data
dim(emoticon.tf.idf)
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf = emoticon.tf.idf[c(nTraining:2*nTraining,50001:5000+nTraining),] #test data
dim(emoticon.tf.idf)
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf = emoticon.tf.idf[c(nTraining:2*nTraining,50001:50000+nTraining),] #test data
dim(emoticon.tf.idf)
table(emoticon.tf.idf$polarity)
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf = emoticon.tf.idf[c(nTraining:(2*nTraining),50001:(50000+nTraining)),] #test data
dim(emoticon.tf.idf)
table(emoticon.tf.idf$polarity)
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf = emoticon.tf.idf[c((nTraining+1):(2*nTraining),50001:(50000+nTraining)),] #test data
table(emoticon.tf.idf$polarity)
nTraining = 25000
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,nTraining), tail(emoticon.tf.idf,nTraining))) #training data
emoticon.tf.idf = emoticon.tf.idf[c((nTraining+1):(2*nTraining),50001:(50000+nTraining)),] #test data
# Build a model using emoticon data and new dictionary
nTraining = 25000
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,nTraining), tail(emoticon.tf.idf,nTraining))) #training data
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity) #accuracy is only 60%
#ROC curve
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf = emoticon.tf.idf[c((nTraining+1):(2*nTraining),50001:(50000+nTraining)),] #test data
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity) #accuracy is only 60%
#ROC curve
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
2+2
rm(name.count)
rm(a)
rm(svm.model)
rm(tree.model)
rm(nb.model)
rm(tf.idf)
rm(freq.all)
rm(phat)
nTraining = 80000
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,nTraining), tail(emoticon.tf.idf,nTraining))) #training data
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity) #accuracy is only 60%
#ROC curve
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,nTraining), tail(emoticon.tf.idf,nTraining))) #training data
help(save)
save(rf.model, file = paste(storage.directory, "rf.model.RData", sep = ""))
rm(rf.model)
load(file = paste(storage.directory, "rf.model.RData", sep = ""))
rf.model.RData
rf.model
rm(rf.model)
rm(a)
rm(pred.sentiment)
rm(tree.model)
rm(emoticon.tf.idf)
rm(emoticon)
nTraining = 40000
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,nTraining), tail(emoticon.tf.idf,nTraining))) #training data
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.tf.idf)
Sys.time()-a
source("functions.R")
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity) #accuracy is only 60%
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf = emoticon.tf.idf[c((nTraining+1):50000,50001:(100000-(nTraining))),] #test data
dim(emoticon.tf.idf)
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity) #accuracy is only 60%
#ROC curve
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
nTraining = 50000
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,nTraining), tail(emoticon.tf.idf,nTraining))) #training data
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.tf.idf)
Sys.time()-a
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity) #accuracy is only 60%
#ROC curve
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf[50001:(nrows(emoticon.tf.idf)-50000)]
emoticon.tf.idf[50001:(nrow(emoticon.tf.idf)-50000)]
emoticon.tf.idf[50001:(nrow(emoticon.tf.idf)-50000),]
dim(emoticon.tf.idf[50001:(nrow(emoticon.tf.idf)-50000),])
dim(emoticon.tf.idf)
# emoticon.tf.idf = emoticon.tf.idf[50001:(nrow(emoticon.tf.idf)-50000),]) # remaining tweets
emoticon.tf.idf = emoticon.tf.idf[50001:(nrow(emoticon.tf.idf)-50000),]) # remaining tweets
emoticon.tf.idf = emoticon.tf.idf[50001:(nrow(emoticon.tf.idf)-50000),] # remaining tweets
dim(emoticon.tf.idf)
pred.sentiment = predict(tree.model, newdata = emoticon.tf.idf, type = "class")
confusionMatrix(pred.sentiment,emoticon.tf.idf$polarity) #accuracy is only 60%
phat=predict(tree.model,
newdata = emoticon.tf.idf,
type = "prob")
plot(roc(emoticon.tf.idf$polarity,phat[,2]))  #BLEH. Not great
nTraining = 25000
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,nTraining), tail(emoticon.tf.idf,nTraining))) #training data
rm(AFINN_lexicon)
rm(phat)
rm(emoticon.tf.idf)
rm(a)
rm(nTraining)
rm(pred.sentiment)
rm(tree.model)
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
nTraining = 25000
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,nTraining), tail(emoticon.tf.idf,nTraining))) #training data
dim(emoticon.tf.idf)
library(e1071)
help(svm)
a = Sys.time()
svm.model=svm(polarity~.,data = emoticon.tf.idf)
Sys.time()-a
dim(emoticon.tf.idf)
pred.sentiment=predict(svm.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment, emoticon.tf.idf$polarity)
phat=predict(svm.model,
newdata = emoticon.tf.idf,
type = "prob")  #not sure what the correct type is
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
library(pROC)
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
head(phat)
confusionMatrix(pred.sentiment, emoticon.tf.idf$polarity)
library(caret)
confusionMatrix(pred.sentiment, emoticon.tf.idf$polarity)
save(svm.model, file = paste(storage.directory, "svm.model.RData", sep = ""))
phat=predict(svm.model,
newdata = emoticon.tf.idf,
type = "prob")  #not sure what the correct type is
plot(roc(emoticon.tf.idf$polarity,phat[,2]))
head(phat)
dim(phat)
length(phat)
dim(tf.idf)
dim(emoticon.tf.idf)
phat=predict(svm.model,
newdata = emoticon.tf.idf,
type = "raw")  #not sure what the correct type is
load(paste(storage.directory,"emoticon.tf.idf.RData", sep = "")) # load emoticon.tf.idf lexicon into memory as tf.idf
emoticon.tf.idf = (rbind(head(emoticon.tf.idf,50000), tail(emoticon.tf.idf,50000))) #reduce to 100000
emoticon.tf.idf = emoticon.tf.idf[c((nTraining+1):50000,50001:(100000-(nTraining))),] #test data
pred.sentiment=predict(svm.model, newdata = emoticon.tf.idf)
confusionMatrix(pred.sentiment, emoticon.tf.idf$polarity)
