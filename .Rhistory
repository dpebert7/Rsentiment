rm(word.freq)
rm(pred.sentiment)
# Random Forest (SLOW: Takes MANY HOURS to run)
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.term.freq[train,])
Sys.time()-a
#Train data results
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[train,], type = "prob")
plot(roc(emoticon.term.freq[train,"polarity"],phat[,2]))
#Test data results
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[test,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[test,], type = "prob")
plot(roc(emoticon.term.freq[test,"polarity"],phat[,2]))
#Save model
save(rf.model, file = paste(storage.directory, "rf.model.RData", sep = ""))
classify.polarity.machine = function(data, model, give.accuracy = FALSE, give.roc.curve = FALSE){
source("functions.R")
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
ndsi.lexicon = freq.all[freq.all$ndsi>0.05,]
term.freq <- t(apply(t(data[,"clean"]), 2,    #MAY TAKE TIME!
ndsi.frequencies))
load(file = paste(storage.directory, "inv.doc.freq.RData", sep = ""))
bigmatrixforclassification = as.data.frame(term.freq %*% diag(inv.doc.freq))
colnames(bigmatrixforclassification) = paste("X", 1:1024, sep = "") #hacky fix for column names
pred.sentiment = predict(model, newdata = bigmatrixforclassification)
if(give.accuracy != FALSE){
require(caret)
result = confusionMatrix(pred.sentiment, data$polarity) # Accuracy is a respectable 68%
print(result$table)
print(result$overall[1])
print(result$byClass[1])
print(result$byClass[2])
#give F1 measure too
}
if(give.roc.curve != FALSE){
require(pROC)
phat=predict(model,
newdata = bigmatrixforclassification,
type = "prob")
result = plot(roc(data$polarity, phat[,2]))
print(result)
}
print("hello world!")
#pred.sentiment
}
source("functions.R")
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
load(file = paste(storage.directory, "sent140.RData", sep = ""))
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
nTrain = 100000
nTest = 100000
happy_indices = 1:(nrow(emoticon.term.freq)/2)
sad_indices = (nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq))
nTrain = 100000
nTest = 100000
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.term.freq[train,])
Sys.time()-a
pred.sentiment = predict(tree.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
phat=predict(tree.model, newdata = emoticon.term.freq[train,], type = "prob")
plot(roc(emoticon.term.freq[train,"polarity"],phat[,2]))
pred.sentiment = predict(tree.model, newdata = emoticon.term.freq[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[test,"polarity"])
phat=predict(tree.model, newdata = emoticon.term.freq[test,], type = "prob")
plot(roc(emoticon.term.freq[test,"polarity"],phat[,2]))
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
classify.polarity.machine(data = sent140, model = tree.model, give.accuracy = TRUE, give.roc.curve = TRUE)
rm(rf.model)
rm(pred.sentiment)
rm(nTrain)
rm(nTest)
rm(negations)
rm(happy_indices)
rm(a)
rm(sad_indices)
rm(sent140)
rm(phat)
rm(freq.all)
rm(emoticon.term.freq)
rm(AFINN_lexicon)
rm(test)
rm(train)
rm(tree.model)
rm(clean.tweets)
rm(ndsi.frequencies)
rm(word.freq)
rm(classify.sentiment)
rm(classify.polarity.machine())
rm(classify.polarity.machine
)
rm(AFINN_lexicon.frequencies)
load(paste(storage.directory,"emoticon.term.freq.RData", sep = "")) # load emoticon.term.freq lexicon into memory as tf.idf
happy_indices = 1:(nrow(emoticon.term.freq)/2)
sad_indices = (nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq))
# Training and test data indices
nTrain = 10
nTest = 200
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.term.freq[train,])
Sys.time()-a
library(rpart)
library(randomForest)
library(pROC)
a = Sys.time()
tree.model = rpart(polarity~., data = emoticon.term.freq[train,])
Sys.time()-a
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
pred.sentiment = predict(tree.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
phat=predict(tree.model, newdata = emoticon.term.freq[train,], type = "prob")
library(caret)
phat=predict(tree.model, newdata = emoticon.term.freq[train,], type = "prob")
plot(roc(emoticon.term.freq[train,"polarity"],phat[,2]))
pred.sentiment = predict(tree.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
phat=predict(tree.model, newdata = emoticon.term.freq[train,], type = "prob")
plot(roc(emoticon.term.freq[train,"polarity"],phat[,2]))
pred.sentiment = predict(tree.model, newdata = emoticon.term.freq[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[test,"polarity"])
phat=predict(tree.model, newdata = emoticon.term.freq[test,], type = "prob")
plot(roc(emoticon.term.freq[test,"polarity"],phat[,2]))
load(paste(storage.directory,"emoticon.term.freq.RData", sep = "")) # load emoticon.term.freq lexicon into memory as tf.idf
happy_indices = 1:(nrow(emoticon.term.freq)/2)
sad_indices = (nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq))
# Training and test data indices
nTrain = 40000
nTest = 40000
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
rm(phat)
rm(a)
rm(nTest)
rm(happy_indices)
rm(sad_indices)
rm(tree.model)
help(notify)
help(buzz)
Sys.timezone()
# Random Forest (SLOW: Takes MANY HOURS to run)
a = Sys.time()
rf.model=randomForest(polarity~.,data = emoticon.term.freq[train,])
Sys.time()-a
#Train data results
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[train,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[train,], type = "prob")
plot(roc(emoticon.term.freq[train,"polarity"],phat[,2]))
#Test data results
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[test,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[test,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[test,], type = "prob")
plot(roc(emoticon.term.freq[test,"polarity"],phat[,2]))
#Save model
save(rf.model, file = paste(storage.directory, "rf.model.RData", sep = ""))
print("DONE! YAY!!!")
load(file = paste(storage.directory, "sent140.RData", sep = ""))
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
classify.polarity.machine = function(data, model, give.accuracy = FALSE, give.roc.curve = FALSE){
source("functions.R")
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
ndsi.lexicon = freq.all[freq.all$ndsi>0.05,]
term.freq <- t(apply(t(data[,"clean"]), 2,    #MAY TAKE TIME!
ndsi.frequencies))
load(file = paste(storage.directory, "inv.doc.freq.RData", sep = ""))
bigmatrixforclassification = as.data.frame(term.freq %*% diag(inv.doc.freq))
colnames(bigmatrixforclassification) = paste("X", 1:1024, sep = "") #hacky fix for column names
pred.sentiment = predict(model, newdata = bigmatrixforclassification)
if(give.accuracy != FALSE){
require(caret)
result = confusionMatrix(pred.sentiment, data$polarity) # Accuracy is a respectable 68%
print(result$table)
print(result$overall[1])
print(result$byClass[1])
print(result$byClass[2])
#give F1 measure too
}
if(give.roc.curve != FALSE){
require(pROC)
phat=predict(model,
newdata = bigmatrixforclassification,
type = "prob")
result = plot(roc(data$polarity, phat[,2]))
print(result)
}
print("hello world!")
#pred.sentiment
}
classify.polarity.machine(data = sent140, model = rf.model, give.accuracy = TRUE, give.roc.curve = TRUE)
pred.sentiment = predict(svm.model, newdata = emoticon.term.freq[-train,], type = "class")
pred.sentiment = predict(rf.model, newdata = emoticon.term.freq[-train,], type = "class")
confusionMatrix(pred.sentiment,emoticon.term.freq[-train,"polarity"])
phat=predict(rf.model, newdata = emoticon.term.freq[-train,], type = "prob")
plot(roc(emoticon.term.freq[-train,"polarity"],phat[,2]))
git rm(emoticon.term.freq)
rm(emoticon.term.freq)
rm(AFINN_lexicon)
rm(freq.all)
rm(phat)
rm(sent140)
rm(a)
rm(negations)
rm(nTrain)
rm(pred.sentiment)
rm(rf.model)
rm(storage.directory)
rm(test)
rm(train)
rm(AFINN_lexicon.frequencies())
rm(AFINN_lexicon.frequencies)
rm(classify.polarity.machine)
rm(classify.sentiment)
rm(clean.tweets)
rm(ndsi.frequencies)
rm(word.freq)
a = Sys.time()
print(a)
load(file = paste(storage.directory, "x.RData", sep = ""))
storage.directory = "~/Desktop/Huang Research/Rsentiment/"
load(file = paste(storage.directory, "x.RData", sep = ""))
source("functions.R")
x = x[4000001:nrow(x)]
x = x[4000001:nrow(x)]
dim(x)
x = x[4000001:nrow(x),]
dim(x)
# clean x
names(x)[names(x)=="text"] <- "clean"
x$clean = clean.tweets(x$clean)
# remove empty rows
dim(x)
x = x[nchar(x$clean)>2,]
dim(x) # remove 113387 + _____ empty rows
# AFINN sentiment
x$AFINN.polarity = classify.sentiment(x$clean, lexicon = AFINN_lexicon)
# Random Forest Sentiment -- too slow right now!
#x$rf.polarity = classify.polarity.machine(x$clean, model = rf.model)
# Check number of columns
dim(x) # x now has 8 columns, 2 more than before
head(x)
# write table
# write.table(x, file = paste(storage.directory, "LA2014.csv", sep = ""), row.names = FALSE, sep = ",")
# append table
write.table(x, file = paste(storage.directory, "LA2014.csv", sep = ""), col.names = FALSE, append = TRUE)
rm(x)
print(Sys.time() - a)
beepr::beep(3)
2+2
rm(x)
rm(AFINN_lexicon)
5227873-5082354
113387 + 145519
(113387 + 145519)/9400000
rm(a)
rm(negations)
rm(storage.directory)
rm(AFINN_lexicon.frequencies)
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 0, nrows = 9000000, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
source("functions.R")
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 0, nrows = 9000000, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
head(y)
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 1, nrows = 100, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
head(y)
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 0, nrows = 100, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
head(y)
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 5000000, nrows = 100, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
head(y)
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 4000000, nrows = 100, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 0, nrows = 4000000, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 0, nrows = 400000, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 0, nrows = 3000000, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
4000000-113387
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 0, nrows = 3886613, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 0, nrows = 3886614, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
y = read.csv(file = paste(storage.directory, "LA2014.csv", sep = ""), skip = 0, nrows = 3886613, header = TRUE,
colClasses = c("character", "character", "character", "numeric", "numeric", "POSIXct", "integer"))
y$time = as.POSIXlt(y$time)
write.table(y, file = paste(storage.directory, "LA2014.csv", sep = ""), row.names = FALSE, sep = ",")
rm(y)
load(file = paste(storage.directory, "x.RData", sep = ""))
x1 = x[1:4500000,]
rm(x)
names(x1)[names(x1)=="text"] <- "clean"
x$clean = clean.tweets(x1$clean)
a = Sys.time()
print(a)
colnames(x)
colnames(x1)
x1$clean = clean.tweets(x1$clean)
# remove empty rows
dim(x1)
x1 = x1[nchar(x1$clean)>2,]
dim(x1) # remove 258906 empty rows (~2.8%)
# AFINN sentiment
x1$AFINN.polarity = classify.sentiment(x1$clean)
# Random Forest Sentiment -- too slow right now!
#x$rf.polarity = classify.polarity.machine(x$clean, model = rf.model)
# Check number of columns
dim(x1) # x now has 12/13 columns, 1/2 more than before
head(x1)
# Save x1  and x2 into storage directory
save(x1, file = paste(storage.directory, "x1.RData", sep = ""))
save(x2, file = paste(storage.directory, "x2.RData", sep = ""))
# write table
write.table(x1, file = paste(storage.directory, "LA2014.csv", sep = ""), row.names = FALSE, sep = ",")
# append table
# write.table(x2, file = paste(storage.directory, "LA2014.csv", sep = ""), col.names = FALSE, append = TRUE)
#rm(x1)
print(Sys.time() - a)
beepr::beep(3)
head(x1)
rm(x1)
load(file = paste(storage.directory, "x.RData", sep = ""))
x2 = x[4500001:nrow(x),]
rm(x)
save(x2, file = paste(storage.directory, "x2.RData", sep = ""))
dim(x2)
a = Sys.time()
print(a)
names(x2)[names(x2)=="text"] <- "clean"
x2$clean = clean.tweets(x2$clean)
dim(x2)
x2 = x2[nchar(x2$clean)>2,]
dim(x2) # remove 258906 empty rows (~2.8%)
# AFINN sentiment
x2$AFINN.polarity = classify.sentiment(x2$clean)
# Random Forest Sentiment -- too slow right now!
#x$rf.polarity = classify.polarity.machine(x$clean, model = rf.model)
# Check number of columns
dim(x2) # x now has 12 columns, 1 more than before
head(x2)
# Save x1  and x2 into storage directory
#save(x1, file = paste(storage.directory, "x1.RData", sep = ""))
save(x2, file = paste(storage.directory, "x2.RData", sep = ""))
# write table
# write.table(x1, file = paste(storage.directory, "LA2014.csv", sep = ""), row.names = FALSE, sep = ",")
# append table
write.table(x2, file = paste(storage.directory, "LA2014.csv", sep = ""), col.names = FALSE, append = TRUE)
print(Sys.time() - a)
beepr::beep(3)
a = Sys.time()
print(a)
Sys.time()-a
dim(x1)
dim(x2)
x2 = x2[1:100000]
x2 = x2[1:100000,]
dim(x2)
x2 = x2[1:10000,]
dim(x2)
a = Sys.time()
print(a)
x2$rf.polarity = classify.polarity.machine(x$clean, model = rf.model)
x2$rf.polarity = classify.polarity.machine(x2$clean, model = rf.model)
library(stringr) #library for str_count function
a = Sys.time()
print(a)
x2$rf.polarity = classify.polarity.machine(x2$clean, model = rf.model)
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
ndsi.lexicon = freq.all[freq.all$ndsi>0.05,]
a = Sys.time()
print(a)
x2$rf.polarity = classify.polarity.machine(x2$clean, model = rf.model)
load(file = paste(storage.directory, "rf.model.RData", sep = ""))
a = Sys.time()
print(a)
x2$rf.polarity = classify.polarity.machine(x2$clean, model = rf.model)
classify.polarity.machine(documents = sent140, model = rf.model)
load(file = paste(storage.directory, "sent140.RData", sep = ""))
classify.polarity.machine(documents = sent140, model = rf.model)
source("functions.R")
classify.polarity.machine(documents = sent140, model = rf.model)
classify.polarity.machine(documents = sent140$clean, model = rf.model)
sent140$clean
classify.polarity.machine(documents = sent140$clean, model = rf.model)
classify.polarity.machine(documents = sent140, model = rf.model)
classify.polarity.machine(documents = sent140$clean, model = rf.model)
documents = sent140$clean
term.freq <- t(apply(t(documents), 2,    #MAY TAKE TIME!
ndsi.frequencies))
dim(term.freq)
colnames(term.freq) = paste("X", 1:1024, sep = "") #hacky fix for column names
pred.sentiment = predict(model, newdata = term.freq, type = "prob")
pred.sentiment = predict(model, newdata = rf.model, type = "prob")
pred.sentiment = predict(rf.model, newdata = term.freq, type = "prob")
rf.model
class(rf.model)
rm(rf.model)
load(file = paste(storage.directory, "rf.model.RData", sep = ""))
class(rf.model)
load(paste(storage.directory,"emoticon.term.freq.RData", sep = "")) # load emoticon.term.freq lexicon into memory as tf.idf
happy_indices = 1:(nrow(emoticon.term.freq)/2)
sad_indices = (nrow(emoticon.term.freq)/2+1):(nrow(emoticon.term.freq))
# Training and test data indices
nTrain = 40000
nTest = 40
train = c(sample(happy_indices,nTrain/2), sample(sad_indices,nTrain/2))
test = c(sample(happy_indices,nTest/2), sample(sad_indices,nTest/2))
library(randomForest)
classify.polarity.machine = function(documents, model = rf.model){
require(plyr)
require(dplyr)
require(randomForest)
load(paste(storage.directory,"freq.all.RData", sep = "")) # load freq.all lexicon into memory as freq.all
ndsi.lexicon = freq.all[freq.all$ndsi>0.05,]
sentpredvec = laply(documents, function(documents, mod = model)
{
term.freq <- t(apply(t(documents), 2,    #MAY TAKE TIME!
ndsi.frequencies))
colnames(term.freq) = paste("X", 1:1024, sep = "") #hacky fix for column names
pred.sentiment = predict(model, newdata = term.freq, type = "prob")
return(pred.sentiment[1])
}, .progress = "text")
return(sentpredvec)
}
pred.sentiment = predict(rf.model, newdata = term.freq, type = "prob")
head(pred.sentiment)
rm(sent140)
rm(term.freq)
rm(pred.sentiment)
rm(documents)
rm(happy_indices
)
rm(sad_indices)
rm(negations)
rm(nTest)
rm(nTrain)
rm(test)
rm(train)
rm(a)
a = Sys.time()
print(a)
x2$rf.polarity = classify.polarity.machine(x2$clean, model = rf.model)
Sys.time()-a
beepr::beep(3)
dim(x2)
head(x2)
tail(x2)
tail(x2,100)
x2[x2$AFINN.polarity>5 & x2$rf.polarity<0.3,]
x2[x2$AFINN.polarity<-5 & x2$rf.polarity>0.8,]
x2[x2$AFINN.polarity < (-5) & x2$rf.polarity>0.8,]
x2[x2$AFINN.polarity < (-1) & x2$rf.polarity>0.8,]
x2[x2$AFINN.polarity ==0 & x2$rf.polarity>0.8,]
head(x2)
x2$AFINN.polarity = classify.sentiment(x2$clean)
source("functions.R")
x2$AFINN.polarity = classify.sentiment(x2$clean)
x2[x2$AFINN.polarity <(-2) & x2$rf.polarity>0.8,]
x2[x2$AFINN.polarity <(-5) & x2$rf.polarity>0.8,]
head(freq.all)
table(freq.all$word==so)
table(freq.all$word=="so")
table(freq.all$word=="bitch")
table(freq.all$word=="ill")
x2[x2$AFINN.polarity <(-10) & x2$rf.polarity>0.7,]
x2[x2$AFINN.polarity <(-10) & x2$rf.polarity>0.6,]
x2[x2$AFINN.polarity <(-8) & x2$rf.polarity>0.6,]
x2[x2$AFINN.polarity <(-8) & x2$rf.polarity>0.7,]
x2[x2$AFINN.polarity <(-2) & x2$rf.polarity>0.9,]
x2[x2$AFINN.polarity <(-2) & x2$rf.polarity<0.3,]
x2[x2$AFINN.polarity <(-5) & x2$rf.polarity<0.3,]
x2[x2$AFINN.polarity <(-5) & x2$rf.polarity<0.2,]
x2[x2$AFINN.polarity <(-10) & x2$rf.polarity<0.2,]
x2[x2$AFINN.polarity ==(-5) & x2$rf.polarity<0.2,]
x2[x2$AFINN.polarity ==(-4) & x2$rf.polarity<0.2,]
x2[x2$AFINN.polarity ==(-3) & x2$rf.polarity<0.2,]
x2[x2$AFINN.polarity ==(-3) & x2$rf.polarity<0.2,c("clean", "AFINN.polarity", "rf.polarity")]
x2[x2$AFINN.polarity ==(-3) & x2$rf.polarity<0.2,c("clean", "username", "AFINN.polarity", "rf.polarity")]
x2[x2$AFINN.polarity >=(10) & x2$rf.polarity>0.8,c("clean", "username", "AFINN.polarity", "rf.polarity")]
x2[x2$AFINN.polarity ==(3) & x2$rf.polarity==1,c("clean", "username", "AFINN.polarity", "rf.polarity")]
x2[x2$AFINN.polarity ==(-3) & x2$rf.polarity==1,c("clean", "username", "AFINN.polarity", "rf.polarity")]
x2[x2$AFINN.polarity ==(-3) & x2$rf.polarity==0.920,c("clean", "username", "AFINN.polarity", "rf.polarity")]
x2[x2$AFINN.polarity ==(8) & x2$rf.polarity==0.920,c("clean", "username", "AFINN.polarity", "rf.polarity")]
x2[x2$AFINN.polarity ==(8) & x2$rf.polarity>=0.8,c("clean", "username", "AFINN.polarity", "rf.polarity")]
x2[x2$AFINN.polarity ==(8) & x2$rf.polarity>=0.624,c("clean", "username", "AFINN.polarity", "rf.polarity")]
x2[x2$AFINN.polarity ==(8) & x2$rf.polarity==0.624,c("clean", "username", "AFINN.polarity", "rf.polarity")]
x2[x2$AFINN.polarity ==(8) & x2$rf.polarity>=0.624,c("clean", "username", "AFINN.polarity", "rf.polarity")]
x2$text = "i dont hate you boyi just want to save you while theres still something left to sav"
head(x2)
dim(sentiment140)
dim(sent140)
rm(x2)
load(file = paste(storage.directory, "sent140.RData", sep = ""))
dim(sent140)
table(sent140$polarity)
View(emoticon.term.freq)
dim(emoticon.term.freq)
table(emoticon.term.freq$polarity)
sad_tweets = read.csv(file = paste(storage.directory, "sad_tweets_2014", sep = ""), nrows = 50000, header = TRUE, colClasses =
c("character", "character", "character", "numeric", "numeric", "POSIXct"))
